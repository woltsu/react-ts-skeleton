{"version":3,"sources":["actions/exampleActions.ts","components/App.tsx","reducers/example.ts","reducers/index.ts","sagas/exampleSaga.ts","sagas/index.ts","store.ts","index.tsx"],"names":["ExampleTypes","fetchValueSuccessful","value","type","FETCH_VALUE_SUCCESSFUL","payload","mapDispatchToProps","fetchValue","FETCH_VALUE","connect","state","example","_ref","useEffect","react_default","a","createElement","className","onClick","Error","initialState","reducers","arguments","length","undefined","action","Object","objectSpread","exampleSaga","fetchValueSaga","regenerator_default","wrap","_context","prev","next","all","takeLatest","stop","_marked","this","_context2","put","Math","random","toString","substring","_marked2","sagas","sagas_marked","sagaMiddleware","createSagaMiddleware","combinedReducers","combineReducers","middleware","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","apply","run","sentryInit","dsn","process","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"6JAAYA,0JAOL,IASMC,EAAuB,SAACC,GAAD,MAA2C,CAC7EC,KAAMH,EAAaI,uBACnBC,QAASH,ICaLI,EAAqB,CACzBC,WDzBwB,iBAAoB,CAC5CJ,KAAMH,EAAaQ,eC2BNC,cARS,SAACC,GAAD,MAAoB,CAC1CR,MAAOQ,EAAMC,QAAQT,QASrBI,EAFaG,CAzB2B,SAAAG,GAA2B,IAAxBV,EAAwBU,EAAxBV,MAAOK,EAAiBK,EAAjBL,WAQlD,OAHAM,oBAAU,WACRN,KACC,IAEDO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,UAA8Bf,GAC9BY,EAAAC,EAAAC,cAAA,UAAQE,QAAUX,GAAlB,eACAO,EAAAC,EAAAC,cAAA,UAAQE,QAVO,WACjB,MAAMC,MAAM,gBASV,iEChBOC,EAA8B,CACzClB,MAAO,UCLMmB,EAAA,CACbV,QDOa,WAAgF,IAA/ED,EAA+EY,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxDF,EAAcK,EAA0CH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7F,OAAQC,EAAOtB,MACb,KAAKH,EAAaI,uBAAwB,OAAOsB,OAAAC,EAAA,EAAAD,CAAA,GAC5ChB,EADqC,CAExCR,MAAOuB,EAAOpB,UAGhB,QAAS,OAAOK,yCEXKkB,cAMRC,GANF,SAAUD,IAAV,OAAAE,EAAAf,EAAAgB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,OADaF,EAAAE,KAAA,EACPC,YAAI,CACRC,YAAWpC,EAAaQ,YAAaqB,KAF1B,wBAAAG,EAAAK,SAAAC,EAAAC,MAMR,SAAUV,IAAV,OAAAC,EAAAf,EAAAgB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OACL,OADKM,EAAAN,KAAA,EACCO,YAAIxC,EAAqByC,KAAKC,SAASC,SAAS,IAAIC,UAAU,KAD/D,wBAAAL,EAAAH,SAAAS,EAAAP,qBCTkBQ,GAAV,SAAUA,IAAV,OAAAjB,EAAAf,EAAAgB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,OADaF,EAAAE,KAAA,EACPC,YAAI,CACRP,MAFW,wBAAAI,EAAAK,SAAAW,EAAAT,MCIf,IAAMU,EAAiBC,cAEjBC,EAAmBC,0BAAgB1B,OAAAC,EAAA,EAAAD,CAAA,GACpCL,IAGCgC,EAAoB,CACxBJ,GAUIK,EAAmBC,8BAAoB,IAEvCC,EAAQC,sBACZN,EACAG,EACEI,kBAAeC,WAAf,EAAmBN,KAIvBJ,EAAeW,IAAIb,GAEJS,QC1BbK,eAAW,CACTC,IAAKC,+DAITC,IAASC,OACPnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUV,MAAOA,GACf1C,EAAAC,EAAAC,cAACmD,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.7a50973f.chunk.js","sourcesContent":["export enum ExampleTypes {\n  FETCH_VALUE = 'Fetch value',\n  FETCH_VALUE_SUCCESSFUL = 'Fetch value successful',\n}\n\ninterface IFetchValue { type: ExampleTypes.FETCH_VALUE }\n\nexport const fetchValue = (): IFetchValue => ({\n  type: ExampleTypes.FETCH_VALUE\n})\n\ninterface IFetchValueSuccessful {\n  type: ExampleTypes.FETCH_VALUE_SUCCESSFUL,\n  payload: string\n}\n\nexport const fetchValueSuccessful = (value: string): IFetchValueSuccessful => ({\n  type: ExampleTypes.FETCH_VALUE_SUCCESSFUL,\n  payload: value\n})\n\nexport type ExampleActions =\n  IFetchValue |\n  IFetchValueSuccessful\n","import React, { FunctionComponent, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchValue } from '../actions/exampleActions'\nimport { IActionCreator, IState } from '../interfaces'\n\ninterface IAppProps {\n  value: string,\n  fetchValue: IActionCreator\n}\n\nconst App: FunctionComponent<IAppProps> = ({ value, fetchValue }) => {\n  // This can be used to test sentry\n  const throwError = () => {\n    throw Error('Error! :((')\n  }\n  useEffect(() => {\n    fetchValue()\n  }, [])\n  return (\n    <div>\n      <p className='value'>Value: { value }</p>\n      <button onClick={ fetchValue }>fetch value</button>\n      <button onClick={ throwError }>throw error</button>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: IState) => ({\n  value: state.example.value\n})\n\nconst mapDispatchToProps = {\n  fetchValue\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","import { ExampleActions, ExampleTypes } from '../actions/exampleActions'\n\nexport interface IExampleState {\n  value: string\n}\n\nexport const initialState: IExampleState = {\n  value: 'Hello!'\n}\n\nexport default (state: IExampleState = initialState, action: ExampleActions): IExampleState => {\n  switch (action.type) {\n    case ExampleTypes.FETCH_VALUE_SUCCESSFUL: return ({\n      ...state,\n      value: action.payload\n    })\n\n    default: return state\n  }\n}\n","import example from './example'\n\nexport default {\n  example\n}\n","import { all, put, takeLatest } from 'redux-saga/effects'\nimport {\n  ExampleTypes,\n  fetchValueSuccessful\n} from '../actions/exampleActions'\n\nexport default function* exampleSaga(): Generator {\n  yield all([\n    takeLatest(ExampleTypes.FETCH_VALUE, fetchValueSaga)\n  ])\n}\n\nexport function* fetchValueSaga(): Generator {\n  yield put(fetchValueSuccessful(Math.random().toString(36).substring(7)))\n}\n","import { all } from 'redux-saga/effects'\nimport exampleSaga from './exampleSaga'\n\nexport default function* sagas() {\n  yield all([\n    exampleSaga()\n  ])\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction'\nimport { createLogger } from 'redux-logger'\nimport createSagaMiddleware from 'redux-saga'\nimport reducers from './reducers'\nimport sagas from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst combinedReducers = combineReducers({\n  ...reducers\n})\n\nconst middleware: any[] = [\n  sagaMiddleware\n]\n\nif (process.env.NODE_ENV === 'development') {\n  const logger = createLogger({\n    collapsed: true\n  })\n  middleware.push(logger)\n}\n\nconst composeEnhancers = composeWithDevTools({})\n\nconst store = createStore(\n  combinedReducers,\n  composeEnhancers(\n    applyMiddleware(...middleware)\n  )\n)\n\nsagaMiddleware.run(sagas)\n\nexport default store\n","import { init as sentryInit } from '@sentry/browser'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport './index.css'\nimport store from './store'\n\nif (process.env.NODE_ENV === 'production') {\n  sentryInit({\n    dsn: process.env.REACT_APP_SENTRY_DSN\n  })\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}